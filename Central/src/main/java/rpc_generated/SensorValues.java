package rpc_generated;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-09")
public class SensorValues implements org.apache.thrift.TBase<SensorValues, SensorValues._Fields>, java.io.Serializable, Cloneable, Comparable<SensorValues> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SensorValues");

  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sationName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SensorValuesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SensorValuesTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String timeStamp; // required
  public @org.apache.thrift.annotation.Nullable String sensorType; // required
  public @org.apache.thrift.annotation.Nullable String value; // required
  public @org.apache.thrift.annotation.Nullable String sationName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_STAMP((short)1, "timeStamp"),
    SENSOR_TYPE((short)2, "sensorType"),
    VALUE((short)3, "value"),
    SATION_NAME((short)4, "sationName");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_STAMP
          return TIME_STAMP;
        case 2: // SENSOR_TYPE
          return SENSOR_TYPE;
        case 3: // VALUE
          return VALUE;
        case 4: // SATION_NAME
          return SATION_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("sationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SensorValues.class, metaDataMap);
  }

  public SensorValues() {
  }

  public SensorValues(
    String timeStamp,
    String sensorType,
    String value,
    String sationName)
  {
    this();
    this.timeStamp = timeStamp;
    this.sensorType = sensorType;
    this.value = value;
    this.sationName = sationName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SensorValues(SensorValues other) {
    if (other.isSetTimeStamp()) {
      this.timeStamp = other.timeStamp;
    }
    if (other.isSetSensorType()) {
      this.sensorType = other.sensorType;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetSationName()) {
      this.sationName = other.sationName;
    }
  }

  public SensorValues deepCopy() {
    return new SensorValues(this);
  }

  @Override
  public void clear() {
    this.timeStamp = null;
    this.sensorType = null;
    this.value = null;
    this.sationName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getTimeStamp() {
    return this.timeStamp;
  }

  public SensorValues setTimeStamp(@org.apache.thrift.annotation.Nullable String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  public void unsetTimeStamp() {
    this.timeStamp = null;
  }

  /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStamp() {
    return this.timeStamp != null;
  }

  public void setTimeStampIsSet(boolean value) {
    if (!value) {
      this.timeStamp = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getSensorType() {
    return this.sensorType;
  }

  public SensorValues setSensorType(@org.apache.thrift.annotation.Nullable String sensorType) {
    this.sensorType = sensorType;
    return this;
  }

  public void unsetSensorType() {
    this.sensorType = null;
  }

  /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorType() {
    return this.sensorType != null;
  }

  public void setSensorTypeIsSet(boolean value) {
    if (!value) {
      this.sensorType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getValue() {
    return this.value;
  }

  public SensorValues setValue(@org.apache.thrift.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getSationName() {
    return this.sationName;
  }

  public SensorValues setSationName(@org.apache.thrift.annotation.Nullable String sationName) {
    this.sationName = sationName;
    return this;
  }

  public void unsetSationName() {
    this.sationName = null;
  }

  /** Returns true if field sationName is set (has been assigned a value) and false otherwise */
  public boolean isSetSationName() {
    return this.sationName != null;
  }

  public void setSationNameIsSet(boolean value) {
    if (!value) {
      this.sationName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TIME_STAMP:
      if (value == null) {
        unsetTimeStamp();
      } else {
        setTimeStamp((String)value);
      }
      break;

    case SENSOR_TYPE:
      if (value == null) {
        unsetSensorType();
      } else {
        setSensorType((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case SATION_NAME:
      if (value == null) {
        unsetSationName();
      } else {
        setSationName((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_STAMP:
      return getTimeStamp();

    case SENSOR_TYPE:
      return getSensorType();

    case VALUE:
      return getValue();

    case SATION_NAME:
      return getSationName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_STAMP:
      return isSetTimeStamp();
    case SENSOR_TYPE:
      return isSetSensorType();
    case VALUE:
      return isSetValue();
    case SATION_NAME:
      return isSetSationName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SensorValues)
      return this.equals((SensorValues)that);
    return false;
  }

  public boolean equals(SensorValues that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timeStamp = true && this.isSetTimeStamp();
    boolean that_present_timeStamp = true && that.isSetTimeStamp();
    if (this_present_timeStamp || that_present_timeStamp) {
      if (!(this_present_timeStamp && that_present_timeStamp))
        return false;
      if (!this.timeStamp.equals(that.timeStamp))
        return false;
    }

    boolean this_present_sensorType = true && this.isSetSensorType();
    boolean that_present_sensorType = true && that.isSetSensorType();
    if (this_present_sensorType || that_present_sensorType) {
      if (!(this_present_sensorType && that_present_sensorType))
        return false;
      if (!this.sensorType.equals(that.sensorType))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_sationName = true && this.isSetSationName();
    boolean that_present_sationName = true && that.isSetSationName();
    if (this_present_sationName || that_present_sationName) {
      if (!(this_present_sationName && that_present_sationName))
        return false;
      if (!this.sationName.equals(that.sationName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTimeStamp()) ? 131071 : 524287);
    if (isSetTimeStamp())
      hashCode = hashCode * 8191 + timeStamp.hashCode();

    hashCode = hashCode * 8191 + ((isSetSensorType()) ? 131071 : 524287);
    if (isSetSensorType())
      hashCode = hashCode * 8191 + sensorType.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetSationName()) ? 131071 : 524287);
    if (isSetSationName())
      hashCode = hashCode * 8191 + sationName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SensorValues other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSationName()).compareTo(other.isSetSationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sationName, other.sationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SensorValues(");
    boolean first = true;

    sb.append("timeStamp:");
    if (this.timeStamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timeStamp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensorType:");
    if (this.sensorType == null) {
      sb.append("null");
    } else {
      sb.append(this.sensorType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sationName:");
    if (this.sationName == null) {
      sb.append("null");
    } else {
      sb.append(this.sationName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (timeStamp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeStamp' was not present! Struct: " + toString());
    }
    if (sensorType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sensorType' was not present! Struct: " + toString());
    }
    if (value == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
    }
    if (sationName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sationName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SensorValuesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SensorValuesStandardScheme getScheme() {
      return new SensorValuesStandardScheme();
    }
  }

  private static class SensorValuesStandardScheme extends org.apache.thrift.scheme.StandardScheme<SensorValues> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SensorValues struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeStamp = iprot.readString();
              struct.setTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENSOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sensorType = iprot.readString();
              struct.setSensorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sationName = iprot.readString();
              struct.setSationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SensorValues struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.timeStamp != null) {
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeString(struct.timeStamp);
        oprot.writeFieldEnd();
      }
      if (struct.sensorType != null) {
        oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
        oprot.writeString(struct.sensorType);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.sationName != null) {
        oprot.writeFieldBegin(SATION_NAME_FIELD_DESC);
        oprot.writeString(struct.sationName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SensorValuesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SensorValuesTupleScheme getScheme() {
      return new SensorValuesTupleScheme();
    }
  }

  private static class SensorValuesTupleScheme extends org.apache.thrift.scheme.TupleScheme<SensorValues> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SensorValues struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.timeStamp);
      oprot.writeString(struct.sensorType);
      oprot.writeString(struct.value);
      oprot.writeString(struct.sationName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SensorValues struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.timeStamp = iprot.readString();
      struct.setTimeStampIsSet(true);
      struct.sensorType = iprot.readString();
      struct.setSensorTypeIsSet(true);
      struct.value = iprot.readString();
      struct.setValueIsSet(true);
      struct.sationName = iprot.readString();
      struct.setSationNameIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

